<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqldiff PUBLIC "-//OpenMRS//DTD OpenMRS SQL Diff Config 1.0//EN" "http://resources.openmrs.org/doctype/sqldiff-1.0.dtd">

<sqldiff version="1.0">
	<help>
		USE:
			The diffs are ordered by datamodel version number.
			The script can be run in a top down fashion and is
			expected to not failor overwrite old data
		
		EXPECT:
			- "use business-database-name;" was called prior to
			   calling this script
	</help>
	
   <diff>
		<version>1.1.0</version>
		<author>Tammy Dugan</author>
		<date>Jan 6, 2009</date>
		<description>
		Initial database setup.
		</description>
	<sql>
	CREATE TABLE atd_form_attribute (
  form_attribute_id int(11) NOT NULL auto_increment,
  name varchar(255) NOT NULL,
  description varchar(255) default NULL,
  PRIMARY KEY  (form_attribute_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE atd_form_attribute_value (
  form_attribute_value_id int(11) NOT NULL auto_increment,
  form_id int(11) NOT NULL,
  value varchar(255) NOT NULL,
  form_attribute_id int(11) NOT NULL,
  PRIMARY KEY  (form_attribute_value_id),
  KEY form_value_fk_form (form_id),
  KEY form_value_fk_attr (form_attribute_id),
  CONSTRAINT form_value_fk_form FOREIGN KEY (form_id) REFERENCES form (form_id),
  CONSTRAINT form_value_fk_attr FOREIGN KEY (form_attribute_id) REFERENCES atd_form_attribute (form_attribute_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE atd_form_instance (
  form_id int(11) NOT NULL,
  form_instance_id int(11) NOT NULL auto_increment,
  PRIMARY KEY  (form_id,form_instance_id)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

CREATE TABLE atd_patient_atd (
  atd_id int(11) NOT NULL auto_increment,
  patient_id int(11) NOT NULL,
  form_id int(11) NOT NULL,
  field_id int(11) NOT NULL,
  text mediumtext,
  rule_id int(11) NOT NULL,
  form_instance_id int(11) NOT NULL,
  creation_time datetime NOT NULL,
  encounter_id int(11) NOT NULL,
  PRIMARY KEY  (atd_id),
  KEY pat_atd_fk_patient (patient_id),
  KEY pat_atd_fk_form (form_id),
  KEY pat_atd_fk_field (field_id),
  KEY pat_atd_fk_rule (rule_id),
  KEY pat_atd_fk_encounter (encounter_id), 
  CONSTRAINT pat_atd_fk_patient FOREIGN KEY (patient_id) REFERENCES patient (patient_id),
  CONSTRAINT pat_atd_fk_form FOREIGN KEY (form_id) REFERENCES form (form_id),
  CONSTRAINT pat_atd_fk_field FOREIGN KEY (field_id) REFERENCES field (field_id),
  CONSTRAINT pat_atd_fk_rule FOREIGN KEY (rule_id) REFERENCES dss_rule (rule_id),
  CONSTRAINT pat_atd_fk_encounter FOREIGN KEY (encounter_id) REFERENCES encounter (encounter_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE atd_program (
  program_id int(11) NOT NULL auto_increment,
  name varchar(255) NOT NULL,
  description varchar(255) default NULL,
  version varchar(255) NOT NULL,
  date_changed datetime default NULL,
  changed_by int(11) default NULL,
  date_created datetime default NULL,
  creator int(11) default NULL,
  PRIMARY KEY  (program_id),
  KEY program_fk_creator (creator),
  KEY program_fk_changed (changed_by),
  CONSTRAINT program_fk_creator FOREIGN KEY (creator) REFERENCES users (user_id),
  CONSTRAINT program_fk_changed FOREIGN KEY (changed_by) REFERENCES users (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE atd_state_action (
  state_action_id int(11) NOT NULL auto_increment,
  action_name varchar(255) NOT NULL,
  action_description varchar(255) default NULL,
  date_changed datetime default NULL,
  changed_by int(11) default NULL,
  date_created datetime default NULL,
  creator int(11) default NULL,
  PRIMARY KEY  (state_action_id),
  KEY state_action_fk_creator (creator),
  KEY state_action_fk_changed (changed_by),
  CONSTRAINT state_action_fk_creator FOREIGN KEY (creator) REFERENCES users (user_id),
  CONSTRAINT state_action_fk_changed FOREIGN KEY (changed_by) REFERENCES users (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE atd_state (
  state_id int(11) NOT NULL auto_increment,
  name varchar(255) NOT NULL,
  description varchar(255) default NULL,
  state_action_id int(11) default NULL,
  form_id int(11) default NULL,
  date_changed datetime default NULL,
  changed_by int(11) default NULL,
  date_created datetime default NULL,
  creator int(11) default NULL,
  PRIMARY KEY  (state_id),
  KEY state_fk_action (state_action_id),
  KEY state_fk_creator (creator),
  KEY state_fk_changed (changed_by),
  KEY state_fk_form (form_id),
  CONSTRAINT state_fk_creator FOREIGN KEY (creator) REFERENCES users (user_id),
  CONSTRAINT state_fk_changed FOREIGN KEY (changed_by) REFERENCES users (user_id),
  CONSTRAINT state_fk_action FOREIGN KEY (state_action_id) REFERENCES atd_state_action (state_action_id),
  CONSTRAINT state_fk_form FOREIGN KEY (form_id) REFERENCES form (form_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE atd_patient_state (
  patient_state_id int(11) NOT NULL auto_increment,
  patient_id int(11) NOT NULL,
  state int(11) NOT NULL,
  start_time datetime NOT NULL,
  end_time datetime default NULL,
  session_id int(11) NOT NULL,
  form_instance_id int(11) default NULL,
  form_id int(11) default NULL,
  PRIMARY KEY  (patient_state_id),
  KEY pat_state_fk_pat (patient_id),
  KEY pat_state_fk_form (form_id),
  KEY pat_state_fk_state (state),
  CONSTRAINT pat_state_fk_form FOREIGN KEY (form_id) REFERENCES form (form_id),
  CONSTRAINT pat_state_fk_pat FOREIGN KEY (patient_id) REFERENCES patient (patient_id),
  CONSTRAINT pat_state_fk_state FOREIGN KEY (state) REFERENCES atd_state (state_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



CREATE TABLE atd_session (
  session_id int(11) NOT NULL auto_increment,
  encounter_id int(11) default NULL,
  PRIMARY KEY  (session_id),
  KEY session_fk_encounter (encounter_id),
  CONSTRAINT session_fk_encounter FOREIGN KEY (encounter_id) REFERENCES encounter (encounter_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



CREATE TABLE atd_state_mapping (
  initial_state int(11) NOT NULL,
  next_state int(11) NOT NULL,
  state_mapping_id int(11) NOT NULL auto_increment,
  date_changed datetime default NULL,
  changed_by int(11) default NULL,
  date_created datetime default NULL,
  creator int(11) default NULL,
  program_id int(11) NOT NULL,
  PRIMARY KEY  (state_mapping_id),
  KEY state_map_fk_initial (initial_state),
  KEY state_map_fk_next (next_state),
  KEY state_map_fk_program (program_id),
  KEY state_map_fk_creator (creator),
  KEY state_map_fk_changed (changed_by),
  CONSTRAINT state_map_fk_initial FOREIGN KEY (initial_state) REFERENCES atd_state (state_id),
  CONSTRAINT state_map_fk_next FOREIGN KEY (next_state) REFERENCES atd_state (state_id),
  CONSTRAINT state_map_fk_program FOREIGN KEY (program_id) REFERENCES atd_program (program_id),
  CONSTRAINT state_map_fk_creator FOREIGN KEY (creator) REFERENCES users (user_id),
  CONSTRAINT state_map_fk_changed FOREIGN KEY (changed_by) REFERENCES users (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO atd_form_attribute
   (`name`, `description`)
VALUES
   ('defaultMergeDirectory', 'Default directory where Teleform looks for xml to merge for this form');

INSERT INTO atd_form_attribute
   (`name`, `description`)
VALUES
   ('defaultExportDirectory', 'Default directory where application looks for Teleform export xml.');
INSERT INTO atd_form_attribute
   (`name`, `description`)
VALUES
   ('formInstanceIdTag', 'XML tagname that contains the form_instance_id for the form instance.');
INSERT INTO atd_form_attribute
   (`name`, `description`)
VALUES
   ('formInstanceIdTag2', 'Alternate XML tagname that contains the form_instance_id for the form instance.');

 INSERT INTO atd_state_action
   (`action_name`, `action_description`)
VALUES
   ('PRODUCE FORM INSTANCE', 'Creating teleform xml');

INSERT INTO atd_state_action
   (`action_name`, `action_description`)
VALUES
   ('PRODUCE JIT', 'Creates a Just In Time handout along with form');
   
   INSERT INTO scheduler_task_config
   (`name`, `schedulable_class`, `start_time`, `start_time_pattern`, `repeat_interval`, `start_on_startup`, `started`, `created_by`, `date_created`, `uuid`)
select 'TeleformMonitor', 'org.openmrs.module.atd.TeleformFileMonitor', 
NOW(), 'MM/dd/yyyy HH:mm:ss', 1, 1, 0, 1, NOW(), UUID() from 
(select count(*) as cnt from scheduler_task_config where name='TeleformMonitor') a
where a.cnt=0;

   INSERT INTO scheduler_task_config_property
   (`name`, `value`, `task_config_id`)
select a.* from 
(select 'initMethod', 'fillUnfinishedStates', max(task_config_id) from scheduler_task_config where name='TeleformMonitor')a,
(select count(*) as cnt from scheduler_task_config_property where name='initMethod'
and task_config_id=(select max(task_config_id) from scheduler_task_config where name='TeleformMonitor') )b
where b.cnt=0;

   INSERT INTO scheduler_task_config_property
   (`name`, `value`, `task_config_id`)
select a.* from 
(select 'initClass', 'org.openmrs.module.chica.ChicaStateActionHandler',max(task_config_id) from scheduler_task_config where name='TeleformMonitor')a,
(select count(*) as cnt from scheduler_task_config_property where name='initClass'
and task_config_id=(select max(task_config_id) from scheduler_task_config where name='TeleformMonitor') )b
where b.cnt=0;
	</sql>
   </diff>
   <diff>
		<version>1.1.1</version>
		<author>Tammy Dugan</author>
		<date>Feb 11, 2009</date>
		<description>
		Added a retired column to atd_patient_state.
		</description>
	<sql>
	alter table atd_patient_state add column retired bit(1) NOT NULL default '\0';
	</sql>
	</diff>
	   <diff>
		<version>1.1.2</version>
		<author>Vibha Anand</author>
		<date>Feb 17, 2009</date>
		<description>
		Added a Cron job to update the retired column of atd_patient_state.
		</description>
	<sql>
	INSERT INTO scheduler_task_config
   (`name`, `schedulable_class`, `start_time`, `start_time_pattern`, `repeat_interval`, `start_on_startup`, `started`, `created_by`, `date_created`, `uuid`)
select 'Cron job for retiring ATD States', 'org.openmrs.module.atd.ATDStatesCron', 
NOW(), 'MM/dd/yyyy HH:mm:ss', 86400, 1, 0, 1, NOW(), UUID() from 
(select count(*) as cnt from scheduler_task_config where name='Cron job for retiring ATD States') a
where a.cnt=0;
	INSERT INTO `atd_form_attribute` (name,description) values ('imageDirectory', 'Directory containing tiff images');
	</sql>
	</diff>
		   <diff>
		<version>1.1.3</version>
		<author>Tammy Dugan</author>
		<date>May 20, 2009</date>
		<description>
		Changed TeleformMonitor task to run only once. There is a loop inside the execute
		method of the task that repeatedly pings the merge/scan directories.
		</description>
	<sql>
	update scheduler_task_config
set
start_time=null,
repeat_interval=86400000
where name='TeleformMonitor';
	</sql>
	</diff>
			   <diff>
		<version>1.1.4</version>
		<author>Tammy Dugan</author>
		<date>May 29, 2009</date>
		<description>
		Added a new form attribute for the name of the directory where pending merge files will go.
		We need a pending directory because Teleform can't process more than around 5 files in the 
		merge directory at a time.
		</description>
	<sql>
	INSERT INTO atd_form_attribute
   (`name`, `description`)
VALUES
   ('pendingMergeDirectory', 'Holds files that will be moved to the Teleform merge directory.');
	</sql>
	</diff>
<diff>
		<version>1.1.5</version>
		<author>Tammy Dugan</author>
		<date>June 11, 2009</date>
		<description>
		Update time that cron job runs to 1am
		</description>
	<sql>	
	update scheduler_task_config
set start_time='2009-06-01 01:00:00'
where name in ('Cron job for retiring ATD States')
</sql>
	</diff>
	<diff>
		<version>1.1.6</version>
		<author>Tammy Dugan</author>
		<date>June 15, 2009</date>
		<description>
		added date_retired column to atd_patient_state
		</description>
	<sql>	
	alter table atd_patient_state add date_retired datetime;
</sql>
	</diff>
		   <diff>
		<version>1.1.7</version>
		<author>Tammy Dugan</author>
		<date>Oct 7, 2009</date>
		<description>
		Scripts needed to support multiple locations
		</description>
	<sql>
		INSERT INTO `location_tag`(location_tag_id,name,creator,date_created,retired,uuid)
		select 1,'Default Location Tag', '1', NOW(), 0, UUID() from 
		(select count(*) as cnt from location_tag where location_tag_id=1) a
		where a.cnt=0;
	
		alter table atd_patient_state add column location_tag_id int NOT NULL default 1;
		alter table atd_patient_state add CONSTRAINT atd_pat_state_fk_loc_tag 
		FOREIGN KEY (location_tag_id) REFERENCES location_tag (location_tag_id);
		alter table atd_patient_state add column location_id int NOT NULL default 1;
		alter table atd_patient_state add CONSTRAINT atd_pat_state_fk_loc 
		FOREIGN KEY (location_id) REFERENCES location(location_id);
			
		alter table atd_patient_atd add column location_id int NOT NULL default 1;	
		CREATE INDEX pat_atd_idx_field ON atd_patient_atd (form_id,field_id,form_instance_id,location_id) ;
		
		alter table atd_patient_atd add CONSTRAINT atd_pat_atd_fk_loc 
		FOREIGN KEY (location_id) REFERENCES location (location_id);
		
		alter table atd_form_instance add column location_id int NOT NULL default 1;
		alter table atd_form_instance add CONSTRAINT atd_form_inst_fk_loc 
		FOREIGN KEY (location_id) REFERENCES location (location_id);
		
		alter table atd_form_attribute_value add column location_tag_id int NOT NULL default 1;
		alter table atd_form_attribute_value add CONSTRAINT atd_form_value_fk_loc_tag 
		FOREIGN KEY (location_tag_id) REFERENCES location_tag (location_tag_id);	
		alter table atd_form_attribute_value add column location_id int NOT NULL default 1;
		alter table atd_form_attribute_value add CONSTRAINT atd_form_value_fk_loc 
		FOREIGN KEY (location_id) REFERENCES location (location_id);
		
		alter table atd_program add column start_state int  default NULL;
		alter table atd_program add column end_state int  default NULL;
		alter table atd_program add CONSTRAINT atd_program_fk_start_state 
		FOREIGN KEY (start_state) REFERENCES atd_state (state_id);
		alter table atd_program add CONSTRAINT atd_program_fk_end_state 
		FOREIGN KEY (end_state) REFERENCES atd_state (state_id);
		
CREATE TABLE `atd_error_category` (
  `error_category_id` int(11) NOT NULL auto_increment,
  `name` varchar(255) NOT NULL,
  `description` varchar(255) default NULL,
  PRIMARY KEY  (`error_category_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `atd_error` (
  `error_id` int(11) NOT NULL auto_increment,
  `error_category_id` int(11) default NULL,
  `level` varchar(50) default NULL,
  `session_id` int(11) default NULL,
  `message` varchar(255) default NULL,
  `details` mediumtext,
  `date_time` datetime default NULL,
  PRIMARY KEY  (`error_id`),
  KEY `error_category_id` (`error_category_id`),
  CONSTRAINT `atd_error_ibfk_1` FOREIGN KEY (`error_category_id`) REFERENCES `atd_error_category` (`error_category_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `atd_program_tag_map` (
  `program_tag_map_id` int(11) NOT NULL auto_increment,
  `program_id` int(11) NOT NULL,
  `location_id` int(11) NOT NULL,
  `location_tag_id` int(11) NOT NULL,
  PRIMARY KEY  (`program_tag_map_id`),
  KEY `atd_prog_tag_map_fk_prog` (`program_id`),
  KEY `atd_prog_tag_map_fk_loc` (`location_id`),
  KEY `atd_prog_tag_map_fk_tag` (`location_tag_id`),
  CONSTRAINT `atd_prog_tag_map_fk_prog` FOREIGN KEY (`program_id`) REFERENCES `atd_program` (`program_id`),
  CONSTRAINT `atd_prog_tag_map_fk_loc` FOREIGN KEY (`location_id`) REFERENCES `location` (`location_id`),
  CONSTRAINT `atd_prog_tag_map_fk_tag` FOREIGN KEY (`location_tag_id`) REFERENCES `location_tag` (`location_tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

update atd_patient_atd a, encounter b
set a.location_id=b.location_id
where a.location_id=1 and a.encounter_id=b.encounter_id;

 ALTER TABLE `atd_form_instance` 
DROP PRIMARY KEY, ADD PRIMARY KEY(`form_id`,`form_instance_id`,`location_id`);

alter table atd_state_action add column action_class varchar(100); 

update atd_state_action
set action_class='org.openmrs.module.atd.action.ProduceJIT'
where action_name='PRODUCE JIT';

 rename table atd_patient_atd to atd_patient_atd_element;
 
 alter table atd_error add CONSTRAINT atd_err_fk_session
		FOREIGN KEY (session_id)  REFERENCES atd_session (session_id);
		
alter table atd_patient_state add CONSTRAINT atd_pat_state_fk_session
		FOREIGN KEY (session_id)  REFERENCES atd_session (session_id);
		
alter table atd_state add column form_name varchar(40) default null;

update atd_state a, form b
set form_name =b.name
where a.form_id=b.form_id; 
	</sql>
	</diff>	
	<diff>
		<version>1.1.8</version>
		<author>Tammy Dugan</author>
		<date>Mar 30, 2011</date>
		<description>
		Separate out move merge files into a separate scheduled task.
		</description>
	<sql>
		INSERT INTO scheduler_task_config
   (`name`, `schedulable_class`,  `repeat_interval`, `start_on_startup`,  `created_by`, `date_created`, `uuid`)
select 'MoveMergeFiles', 'org.openmrs.module.atd.MoveMergeFiles', 
 86400000, 1, 1, NOW(), UUID() from 
(select count(*) as cnt from scheduler_task_config where name='MoveMergeFiles') a
where a.cnt=0;
	</sql>
	</diff>	
	<diff>
        <version>1.1.9</version>
        <author>Steve McKee</author>
        <date>April 19, 2011</date>
        <description>
        Remove the ATD drive letter global property.
        </description>
    <sql>
    delete from global_property where property='atd.driveLetter';
    </sql>
    </diff> 
    <diff>
        <version>1.2.0</version>
        <author>Tammy Dugan</author>
        <date>June 9, 2011</date>
        <description>
        Remove pendingMergeDirectory form attribute
        </description>
    <sql>
    delete from atd_form_attribute_value where form_attribute_id in (
select form_attribute_id from atd_form_attribute where name='pendingMergeDirectory');

delete from atd_form_attribute where name='pendingMergeDirectory';
    </sql>
    </diff> 
    <diff>
        <version>1.2.1</version>
        <author>Tammy Dugan</author>
        <date>June 22, 2011</date>
        <description>
        Added a state action for FINISHED state
        </description>
    <sql>
    insert into atd_state_action (action_name,action_description,action_class) 
    values ('Purge XML datasource','Clears the form from the xml datasource','org.openmrs.module.atd.action.Finish');

	update atd_state a, (select state_action_id from atd_state_action where action_name = 'Purge XML datasource') b 
	set a.state_action_id=b.state_action_id
	where a.name='FINISHED';
</sql>
    </diff>
    <diff>
        <version>1.2.2</version>
        <author>Tammy Dugan</author>
        <date>June 28, 2011</date>
        <description>
        Move data to renamed tables and drop old tables.
        </description>
    <sql>
Insert into chirdlutilbackports_form_attribute
select * from atd_form_attribute;

Insert into chirdlutilbackports_form_attribute_value
select * from atd_form_attribute_value;

Insert into chirdlutilbackports_form_instance
select * from atd_form_instance;

Insert into chirdlutilbackports_session
select * from atd_session;

Insert into chirdlutilbackports_error_category
select * from atd_error_category;

Insert into chirdlutilbackports_error
select * from atd_error;

Insert into chirdlutilbackports_state_action
select * from atd_state_action;

Insert into chirdlutilbackports_state 
select state_id, name, description, state_action_id, date_changed, changed_by, date_created, creator, form_name from atd_state;
  
Insert into chirdlutilbackports_program
select * from atd_program;
  
Insert into chirdlutilbackports_program_tag_map
select * from atd_program_tag_map;
 
Insert into chirdlutilbackports_state_mapping
select * from atd_state_mapping;

Insert into chirdlutilbackports_patient_state
select * from atd_patient_state;

drop TABLE IF EXISTS atd_form_attribute_value;
drop TABLE IF EXISTS atd_form_attribute;
drop TABLE IF EXISTS atd_patient_state;
drop TABLE IF EXISTS atd_error;
drop TABLE IF EXISTS atd_error_category;
drop TABLE IF EXISTS atd_program_tag_map;
drop TABLE IF EXISTS atd_state_mapping;
drop TABLE IF EXISTS atd_program;
drop TABLE IF EXISTS atd_state;
drop TABLE IF EXISTS atd_state_action;
drop TABLE IF EXISTS atd_session;
drop TABLE IF EXISTS atd_form_instance;
</sql>
    </diff> 
        <diff>
        <version>1.2.3</version>
        <author>Tammy Dugan</author>
        <date>July 7, 2011</date>
        <description>
        Create atd_statistics table.
        Get rid of numQuestions form attribute.
        </description>
    <sql>
	CREATE TABLE `atd_statistics` (
  `statistics_id` int(11) NOT NULL AUTO_INCREMENT,
  `patient_id` int(11) NOT NULL,
  `form_name` varchar(255) NOT NULL,
  `rule_id` int(11) DEFAULT NULL,
  `form_instance_id` int(11) NOT NULL,
  `encounter_id` int(11) NOT NULL,
  `position` int(11) DEFAULT NULL,
  `answer` varchar(255) DEFAULT NULL,
  `answer_err` varchar(255) DEFAULT NULL,
  `printed_timestamp` varchar(255) DEFAULT NULL,
  `scanned_timestamp` varchar(255) DEFAULT NULL,
  `priority` int(11) DEFAULT NULL,
  `obsv_id` int(11) DEFAULT NULL,
  `language_response` varchar(255) DEFAULT NULL,
  `age_at_visit` varchar(255) NOT NULL,
  `location_tag_id` int(11) NOT NULL DEFAULT '1',
  `location_id` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`statistics_id`),
  KEY `atd_stats_fk_pat` (`patient_id`),
  KEY `atd_stats_fk_rule` (`rule_id`),
  KEY `atd_stats_fk_encounter` (`encounter_id`),
  KEY `atd_stats_fk_obs` (`obsv_id`),
  KEY `atd_stats_idx_encounter` (`encounter_id`,`form_name`),
  KEY `atd_stats_fk_loc_tag` (`location_tag_id`),
  KEY `atd_stats_fk_loc` (`location_id`),
  CONSTRAINT `atd_stats_fk_loc` FOREIGN KEY (`location_id`) REFERENCES `location` (`location_id`),
  CONSTRAINT `atd_stats_fk_loc_tag` FOREIGN KEY (`location_tag_id`) REFERENCES `location_tag` 

(`location_tag_id`),
  CONSTRAINT `atd_stats_fk_encounter` FOREIGN KEY (`encounter_id`) REFERENCES `encounter` 

(`encounter_id`),
  CONSTRAINT `atd_stats_fk_obs` FOREIGN KEY (`obsv_id`) REFERENCES `obs` (`obs_id`),
  CONSTRAINT `atd_stats_fk_pat` FOREIGN KEY (`patient_id`) REFERENCES `patient` (`patient_id`),
  CONSTRAINT `atd_stats_fk_rule` FOREIGN KEY (`rule_id`) REFERENCES `dss_rule` (`rule_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1411 DEFAULT CHARSET=utf8;

update chirdlutilbackports_form_attribute_value a,
(select * from chirdlutilbackports_form_attribute where name='numPrompts') b,
(select form_attribute_id from chirdlutilbackports_form_attribute where name='numQuestions') c
set a.form_attribute_id=b.form_attribute_id
where a.form_attribute_id=c.form_attribute_id;
	</sql>
    </diff>
    <diff>
        <version>1.2.4</version>
        <author>Steve McKee</author>
        <date>July 8, 2011</date>
        <description>
        Remove the atd.defaultPackagePrefix global property.  It was been moved to the DSS module.
        </description>
	    <sql>
	    delete from global_property where property = 'atd.defaultPackagePrefix';
	    </sql>
    </diff>
    <diff>
        <version>1.2.5</version>
        <author>Tammy Dugan</author>
        <date>Aug 5, 2011</date>
        <description>
       Update dss.defaultPackagePrefix global property to include rule libraries in both dss and atd.
        </description>
	    <sql>
	    update global_property 
		set property_value='org.openmrs.module.dss.ruleLibrary, org.openmrs.module.atd.ruleLibrary'
		where property='dss.defaultPackagePrefix';
	    </sql>
    </diff>
    <diff>
        <version>1.2.6</version>
        <author>Steve McKee</author>
        <date>Aug 31, 2011</date>
        <description>
        Add an index to the atd_statistics table for faster queries.
        </description>
        <sql>
        create index atd_stats_idx_form on atd_statistics (form_name,form_instance_id);
        </sql>
    </diff>
    <diff>
        <version>1.2.7</version>
        <author>Steve McKee</author>
        <date>October 5, 2011</date>
        <description>
        Add indexes to the atd_statistics table.
        </description>
        <sql>
        create index atd_stats_idx_instance on atd_statistics (location_id,form_name,form_instance_id);
        </sql>
    </diff>
    <diff>
        <version>1.2.8</version>
        <author>Steve McKee</author>
        <date>October 28, 2011</date>
        <description>
        Add scheduled task information for the archive merge files task.
        </description>
    <sql>
        INSERT INTO scheduler_task_config
        (`name`, `schedulable_class`, `start_time`, `start_time_pattern`, `repeat_interval`, `start_on_startup`, `created_by`, `date_created`, `uuid`)
        values ('ArchiveMergeFiles', 'org.openmrs.module.atd.ArchiveMergeFiles', '2011-10-28 01:30:00', 'MM/dd/yyyy HH:mm:ss',
        86400, 1, 1, NOW(), UUID());
        
        INSERT INTO scheduler_task_config_property 
        (`name`, `value`, `task_config_id`) 
        values('daysToKeep', '1', (select task_config_id from scheduler_task_config where name = 'ArchiveMergeFiles'));
        
    </sql>
    </diff> 
    <diff>
        <version>1.2.9</version>
        <author>Steve McKee</author>
        <date>November 3, 2011</date>
        <description>
        Add scheduled task information for the archive scan files task.
        </description>
    <sql>
        INSERT INTO scheduler_task_config
        (`name`, `schedulable_class`, `start_time`, `start_time_pattern`, `repeat_interval`, `start_on_startup`, `created_by`, `date_created`, `uuid`)
        values ('ArchiveScanFiles', 'org.openmrs.module.atd.ArchiveScanFiles', '2011-11-03 02:30:00', 'MM/dd/yyyy HH:mm:ss',
        86400, 1, 1, NOW(), UUID());
        
        INSERT INTO scheduler_task_config_property 
        (`name`, `value`, `task_config_id`) 
        values('daysToKeep', '30', (select task_config_id from scheduler_task_config where name = 'ArchiveScanFiles'));
        
    </sql>
    </diff>
    <diff>
        <version>1.3.0</version>
        <author>Steve McKee</author>
        <date>Sept 24, 2012</date>
        <description>
        Copy the value from atd.outgoingFaxDirectory to chirdlutil.outgoingFaxDirectory and delete the atd.outgoingFaxDirectory global property.
        </description>
	    <sql>
	        update global_property a, global_property b 
	        set a.property_value = b.property_value 
	        where a.property = 'chirdlutil.outgoingFaxDirectory' 
	        and b.property = 'atd.outgoingFaxDirectory' 
	        and b.property_value is not null 
	        and char_length(b.property_value) > 0;
	        
	        delete from global_property where property = 'atd.outgoingFaxDirectory';
	    </sql>
    </diff>
    <diff>
        <version>1.3.1</version>
        <author>Steve McKee</author>
        <date>May 8, 2014</date>
        <description>
        Add new 'mobileOnly' form attribute
        </description>
        <sql>
        INSERT INTO chirdlutilbackports_form_attribute
        (`name`, `description`)
        VALUES
        ('mobileOnly', 'Indicates if the form will be used as a mobile-only version.');
        </sql>
    </diff>
    <diff>
        <version>1.3.2</version>
        <author>Tammy Dugan</author>
        <date>September 16, 2014</date>
        <description>
        Add new 'outputType' form attribute.
        </description>
        <sql>
        INSERT INTO chirdlutilbackports_form_attribute
        (`name`, `description`)
        VALUES
        ('outputType', 'Indicates if the form should be printed via Teleform or available as a pdf. Valid values are "pdf", "teleformXML", and "teleformPdf". All can be chosen by separating with commas');
        </sql>
    </diff>
    <diff>
        <version>1.3.4</version>
        <author>Steve McKee</author>
        <date>November 14, 2014</date>
        <description>
        Attribute used to identify a PDF form that needs images merged.
        </description>
        <sql>
        INSERT INTO chirdlutilbackports_form_attribute
        (`name`, `description`)
        VALUES
        ('requriesPDFImageMerge', 'Indicates if the pdf form needs images merged.');
        </sql>
    </diff>
    <diff>
        <version>1.3.5</version>
        <author>Steve McKee</author>
        <date>February 12, 2015</date>
        <description>
        Add scheduled task information for the delete merged pdf files task.
        </description>
	    <sql>
	        INSERT INTO scheduler_task_config
	        (`name`, `schedulable_class`, `start_time`, `start_time_pattern`, `repeat_interval`, `start_on_startup`, `created_by`, `date_created`, `uuid`)
	        values ('DeleteMergedPDFFiles', 'org.openmrs.module.atd.DeleteMergedPDFFiles', '2015-02-15 02:00:00', 'MM/dd/yyyy HH:mm:ss',
	        86400, 1, 1, NOW(), UUID());
	        
	        INSERT INTO scheduler_task_config_property 
	        (`name`, `value`, `task_config_id`) 
	        values('daysToKeep', '14', (select task_config_id from scheduler_task_config where name = 'DeleteMergedPDFFiles'));
	    </sql>
    </diff> 
</sqldiff>